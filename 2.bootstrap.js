(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[2],{

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! exports provided: main, setup */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"main\", function() { return main; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setup\", function() { return setup; });\n/* harmony import */ var _setListeners_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setListeners.js */ \"./setListeners.js\");\nvar Plotly = __webpack_require__(/*! plotly.js-dist */ \"./node_modules/plotly.js-dist/plotly.js\");\nvar FileSaver = __webpack_require__(/*! file-saver */ \"./node_modules/file-saver/dist/FileSaver.min.js\");\n\n\n\nlet wasm = null;\n\ndocument.Plotly = Plotly;\n\nconst input_network = document.getElementById(\"input-network\");\nconst input_initial = document.getElementById(\"input-initial\");\nconst input_steps   = document.getElementById(\"input-steps\");\nconst input_time    = document.getElementById(\"input-time\");\n\nconst checkbox_time = document.getElementById(\"checkbox-time\");\n\nfunction main() {\n  document.getElementById(\"button-compute\").addEventListener(\"click\", on_compute);\n  Object(_setListeners_js__WEBPACK_IMPORTED_MODULE_0__[\"setListeners\"])(document);\n}\n\nfunction setup(Wasm) {\n    wasm = Wasm;\n}\n\nfunction on_compute() {\n  let str_net = input_network.value;\n  let str_init = input_initial.value;\n  let reactions = parse(str_net);\n  let [pre, post, species] = to_matrix(reactions);\n  let inits = parse_inits(str_init, species);\n  let hazards = new Float64Array(reactions.map(r => r.rate));\n  let steps = parseInt(input_steps.value);\n  let max_time = null;\n  if (checkbox_time.checked)\n    max_time = parseFloat(input_time.value);\n  let res = compute(pre, post, inits, hazards, steps, max_time);\n  plot(res, species);\n}\n\nfunction parse(raw) {\n\n  function parse_line(line) {\n    let res = {\n      pre : {},\n      post : {}\n    };\n    let buffer = \"\";\n\n    for (let i = 0; i < line.length; i++) {\n      if (line[i] == ':')\n      {\n        res.rate = Number(buffer);\n        buffer = \"\";\n        line = line.slice(i+1);\n        break;\n      }\n      buffer += line[i];\n    }\n\n    let prev_num = 1;\n    for (let i = 0; i < line.length; i++) {\n      if (line[i] == '*') {\n        prev_num = parseInt(buffer);\n        buffer = \"\";\n      }\n      else if ( line[i] == '+' || line[i] == '-' ) {\n        if (buffer.trim() !== \"\")\n          res.pre[buffer.trim()] = prev_num;\n        prev_num = 1;\n        buffer = \"\";\n        if (line[i] == '-') {\n          line = line.slice(i+2);\n          break;\n        }\n      }\n      else\n        buffer += line[i];\n    }\n\n    prev_num = 1;\n    for (let i = 0; i < line.length; i++) {\n      if (line[i] == '*') {\n        prev_num = parseInt(buffer);\n        buffer = \"\";\n      }\n      else if ( line[i] == '+' ) {\n        res.post[buffer.trim()] = prev_num;\n        prev_num = 1;\n        buffer = \"\";\n      }\n      else\n        buffer += line[i];\n    }\n\n    if (buffer.trim() !== \"\")\n      res.post[buffer.trim()] = prev_num;\n\n    if (Object.keys(res.pre).length+Object.keys(res.post) < 1)\n      return undefined;\n    return res;\n  }\n\n  let reactions = [];\n\n  for (let line of raw.trim().split('\\n'))\n  {\n    let l = parse_line(line);\n    if (l !== undefined)\n      reactions.push(l);\n  }\n  \n  return reactions;\n}\n\nfunction to_matrix(reactions) {\n  let species_set = new Set();\n  for (let r of reactions) {\n    species_set = new Set([...species_set, ...Object.keys(r.pre)]);\n    species_set = new Set([...species_set, ...Object.keys(r.post)]);\n  }\n  let species = Array.from(species_set);\n  let n = species.length;\n\n  let pre = [];\n  let post = [];\n\n  for (let r of reactions) {\n    let pre_line = Array(n).fill(0);\n    let post_line = Array(n).fill(0);\n    for (let s of Object.entries(r.pre))\n      pre_line[species.findIndex(e => e == s[0])] = s[1];\n    for (let s of Object.entries(r.post))\n      post_line[species.findIndex(e => e == s[0])] = s[1];\n\n    pre = [...pre, ...pre_line];\n    post = [...post, ...post_line];\n  }\n  return [new Int32Array(pre), new Int32Array(post), species];\n}\n\nfunction parse_inits(raw, species) {\n  // TODO - this sets zero as default\n  let inits = Array(species.length).fill(0);\n  for (let line of raw.trim().split('\\n')) {\n    let name = line.split('=')[0].trim();\n    let val = parseInt(line.split('=')[1]);\n    inits[species.findIndex(e => e == name)] = val;\n  }\n  return new Int32Array(inits);\n}\n\nfunction compute(pre, post, inits, hazards, steps, max_time) {\n  let config = {\n    \"pre\" : pre,\n    \"post\" : post,\n    \"inits\" : inits,\n    \"hazards\" : hazards,\n    \"steps\" : steps,\n    \"max_time\" : max_time,\n  };\n  return wasm.gillespie(config);\n  //return wasm.compute(pre, post, inits, hazards, steps);\n}\n\nfunction plot(res, species) {\n  \n  let data = [];\n  species.forEach((s, i) => {\n    data.push({\n      x: res.get('time'),\n      y: res.get(i.toString()),\n      type: 'scatter',\n      mode: 'line',\n      name: s,\n    });\n  });\n  let layout = { \n    // title: 'Responsive to window\\'s size!',\n    // font: {size: 18}\n  };\n\n  let icon_gnuplot = {\n    \"name\" : \"icon-gnuplot\",\n    \"svg\" : '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?> <svg xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\" xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\" width=\"512.0px\" height=\"512.0px\" viewBox=\"0 0 512.0 512.0\" version=\"1.1\" id=\"SVGRoot\" sodipodi:docname=\"gnuplot.svg\" inkscape:version=\"1.0.2 (e86c870879, 2021-01-15)\"> <defs id=\"defs1402\"> <rect x=\"0\" y=\"0\" width=\"340\" height=\"280\" id=\"rect1981\" /> </defs> <sodipodi:namedview id=\"base\" pagecolor=\"#ffffff\" bordercolor=\"#666666\" borderopacity=\"1.0\" inkscape:pageopacity=\"0.0\" inkscape:pageshadow=\"2\" inkscape:zoom=\"0.7\" inkscape:cx=\"346.24424\" inkscape:cy=\"319.5529\" inkscape:document-units=\"px\" inkscape:current-layer=\"text1987\" inkscape:document-rotation=\"0\" showgrid=\"true\" inkscape:window-width=\"1920\" inkscape:window-height=\"1007\" inkscape:window-x=\"0\" inkscape:window-y=\"0\" inkscape:window-maximized=\"1\"> <inkscape:grid type=\"xygrid\" id=\"grid1972\" /> </sodipodi:namedview> <metadata id=\"metadata1405\"> <rdf:RDF> <cc:Work rdf:about=\"\"> <dc:format>image/svg+xml</dc:format> <dc:type rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /> <dc:title /> </cc:Work> </rdf:RDF> </metadata> <g inkscape:label=\"Warstwa 1\" inkscape:groupmode=\"layer\" id=\"layer1\"> <text xml:space=\"preserve\" id=\"text1979\" style=\"font-family:\\'URW Gothic\\';font-size:40px;line-height:1.25;letter-spacing:0px;word-spacing:0px;-inkscape-font-specification:\\'URW Gothic\\';white-space:pre;shape-inside:url(#rect1981);\" /> <g aria-label=\"GP\" id=\"text1987\" style=\"font-size:240px;line-height:1.25;font-family:mo;-inkscape-font-specification:mo;letter-spacing:0px;word-spacing:0px;stroke-width:0.749415\"> <path d=\"m 230.86328,338.97763 v -46.99219 h -38.67187 v -19.45312 h 62.10937 v 75.11719 q -13.71094,9.72656 -30.23437,14.76562 -16.52344,4.92188 -35.27344,4.92188 -41.01563,0 -64.21875,-23.90625 -23.08594,-24.02344 -23.08594,-66.79688 0,-42.89062 23.08594,-66.79687 23.20312,-24.02344 64.21875,-24.02344 17.10937,0 32.46094,4.21875 15.46875,4.21875 28.47656,12.42187 v 25.19532 q -13.125,-11.13282 -27.89063,-16.75782 -14.76562,-5.625 -31.05468,-5.625 -32.10938,0 -48.28125,17.92969 -16.05469,17.92969 -16.05469,53.4375 0,35.39063 16.05469,53.32031 16.17187,17.92969 48.28125,17.92969 12.53906,0 22.38281,-2.10937 9.84375,-2.22657 17.69531,-6.79688 z\" style=\"font-size:240px;stroke-width:0.749415\" id=\"path836\" /> <path d=\"m 321.21484,208.43076 v 65.74218 h 29.76563 q 16.52344,0 25.54687,-8.55468 9.02344,-8.55469 9.02344,-24.375 0,-15.70313 -9.02344,-24.25782 -9.02343,-8.55468 -25.54687,-8.55468 z m -23.67187,-19.45313 h 53.4375 q 29.41406,0 44.41406,13.35938 15.11719,13.24218 15.11719,38.90625 0,25.89843 -15.11719,39.14062 -15,13.24219 -44.41406,13.24219 h -29.76563 v 70.3125 h -23.67187 z\" style=\"font-size:240px;stroke-width:0.749415\" id=\"path838\" /> </g> <path id=\"path2021\" style=\"fill:none;stroke:#000000;stroke-width:9.4488189;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\" d=\"m 345,35 v 100 h 100 v 0 M 66,36 V 476 H 446 L 445,135 345,36 Z\" /> </g> </svg>',\n  };\n\n  let icon_json = {\n    \"name\" : \"icon-json\",\n    \"svg\" : '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?> <svg xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\" xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\" width=\"512.0px\" height=\"512.0px\" viewBox=\"0 0 512.0 512.0\" version=\"1.1\" id=\"SVGRoot\" sodipodi:docname=\"json.svg\" inkscape:version=\"1.0.2 (e86c870879, 2021-01-15)\"> <defs id=\"defs1402\"> <rect x=\"0\" y=\"0\" width=\"340\" height=\"280\" id=\"rect1981\" /> </defs> <sodipodi:namedview id=\"base\" pagecolor=\"#ffffff\" bordercolor=\"#666666\" borderopacity=\"1.0\" inkscape:pageopacity=\"0.0\" inkscape:pageshadow=\"2\" inkscape:zoom=\"0.7\" inkscape:cx=\"346.24424\" inkscape:cy=\"319.5529\" inkscape:document-units=\"px\" inkscape:current-layer=\"layer1\" inkscape:document-rotation=\"0\" showgrid=\"true\" inkscape:window-width=\"1920\" inkscape:window-height=\"1007\" inkscape:window-x=\"0\" inkscape:window-y=\"0\" inkscape:window-maximized=\"1\"> <inkscape:grid type=\"xygrid\" id=\"grid1972\" /> </sodipodi:namedview> <metadata id=\"metadata1405\"> <rdf:RDF> <cc:Work rdf:about=\"\"> <dc:format>image/svg+xml</dc:format> <dc:type rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /> <dc:title /> </cc:Work> </rdf:RDF> </metadata> <g inkscape:label=\"Warstwa 1\" inkscape:groupmode=\"layer\" id=\"layer1\"> <text xml:space=\"preserve\" id=\"text1979\" style=\"font-family: \\'URW Gothic \\';font-size:40px;line-height:1.25;letter-spacing:0px;word-spacing:0px;-inkscape-font-specification: \\'URW Gothic \\';white-space:pre;shape-inside:url(#rect1981);\" /> <g aria-label=\"{}\" id=\"text1987\" style=\"font-size:255.8px;line-height:1.25;font-family:mo;-inkscape-font-specification:mo;letter-spacing:0px;word-spacing:0px;stroke-width:0.749415\"> <path d=\"m 224.025,378.87912 v 17.98594 h -7.74395 q -31.10068,0 -41.71738,-9.24278 -10.4918,-9.24277 -10.4918,-36.84619 v -29.85166 q 0,-18.86025 -6.74472,-26.10459 -6.74473,-7.24433 -24.48086,-7.24433 h -7.61905 v -17.86104 h 7.61905 q 17.86103,0 24.48086,-7.11943 6.74472,-7.24434 6.74472,-25.85479 v -29.97656 q 0,-27.60342 10.4918,-36.72129 10.6167,-9.24277 41.71738,-9.24277 h 7.74395 v 17.86103 h -8.49336 q -17.61123,0 -22.98203,5.4957 -5.3708,5.49571 -5.3708,23.10694 v 30.97578 q 0,19.60967 -5.74551,28.47773 -5.62061,8.86807 -19.35986,11.99063 13.86416,3.37236 19.48476,12.24043 5.62061,8.86807 5.62061,28.35283 v 30.97578 q 0,17.61123 5.3708,23.10694 5.3708,5.4957 22.98203,5.4957 z\" style=\"font-size:255.8px;stroke-width:0.749415\" id=\"path836\" /> <path d=\"m 287.975,378.87912 h 8.74316 q 17.48633,0 22.73223,-5.3708 5.3708,-5.3708 5.3708,-23.23184 V 319.3007 q 0,-19.48476 5.62061,-28.35283 5.6206,-8.86807 19.48476,-12.24043 -13.86416,-3.12256 -19.48476,-11.99063 -5.62061,-8.86806 -5.62061,-28.47773 V 207.2633 q 0,-17.73614 -5.3708,-23.10694 -5.2459,-5.4957 -22.73223,-5.4957 H 287.975 v -17.86103 h 7.86885 q 31.10068,0 41.46758,9.24277 10.49179,9.11787 10.49179,36.72129 v 29.97656 q 0,18.61045 6.74473,25.85479 6.74473,7.11943 24.48086,7.11943 h 7.74395 v 17.86104 h -7.74395 q -17.73613,0 -24.48086,7.24433 -6.74473,7.24434 -6.74473,26.10459 v 29.85166 q 0,27.60342 -10.49179,36.84619 -10.3669,9.24278 -41.46758,9.24278 H 287.975 Z\" style=\"font-size:255.8px;stroke-width:0.749415\" id=\"path838\" /> </g> <path id=\"path2021\" style=\"fill:none;stroke:#000000;stroke-width:9.4488189;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none\" d=\"m 345,35 v 100 h 100 v 0 M 66,36 V 476 H 446 L 445,135 345,36 Z\" /> </g> </svg> '\n  }\n\n  let config = {\n    responsive: true,\n    modeBarButtonsToAdd: [\n      {\n        name: 'Export to Gnuplot',\n        icon: icon_gnuplot,\n        click: function() {\n          let content = [];\n          species.forEach((s, i) => {\n              content.push(`# ${(i < 1) ? 'plot' : '    '} \"simulation.dat\" using 1:${i+2} title '${s}' with lines${(i < species.length-1) ? ',' : ''}\\n`);\n          });\n          content.push(`# time\\t${species.join('\\t')}\\n`);\n          res.get(\"time\").forEach((t, i) => {\n            content.push(`${t}\\t${\n              species.map((_, j) => {\n                return res.get(j.toString())[i];\n                }).join('\\t')\n              }\\n`);\n          });\n          let blob = new Blob(content, {type: \"text/plain;charset=utf-8\"});\n          FileSaver.saveAs(blob, \"simulation.dat\") \n        }\n      },\n      {\n        name: 'Export to JSON',\n        icon: icon_json,\n        click: function() {\n          let blob = new Blob([JSON.stringify({\n            \"time\" : Array.from(res.get(\"time\")),\n            \"data\" : species.map((s, i) => {\n              return {\n                \"id\" : s,\n                \"value\" : Array.from(res.get(i.toString())),\n              };\n            })\n          })], {type: \"application/json;charset=utf-8\"});\n          FileSaver.saveAs(blob, \"simulation.json\");    \n        }\n      }\n    ]\n  };\n  Plotly.newPlot('div-graph', data, layout, config);\n}\n\n//# sourceURL=webpack:///./index.js?");

/***/ }),

/***/ "./setListeners.js":
/*!*************************!*\
  !*** ./setListeners.js ***!
  \*************************/
/*! exports provided: setListeners */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setListeners\", function() { return setListeners; });\nconst Lotka_Volterra_net = \"\\\n1:           Prey -> 2*Prey\\n\\\n0.005: Predator + Prey -> 2*Predator\\n\\\n0.6:      Predator -> \\\n\";\n\nconst Lotka_Volterra_init = \"\\\nPrey = 50\\n\\\nPredator = 100\\\n\";\n\nconst Michaelis_Menten_net = \"\\\n0.00166:  S + E -> SE\\n\\\n0.0001:    SE -> S + E\\n\\\n0.1:            SE -> P + E\\\n\";\n\nconst Michaelis_Menten_init = \"\\\nS = 301\\n\\\nE = 120\\n\\\nSE = 0\\n\\\nP = 0\\\n\";\n\nconst Dimerisation_net = \"\\\n0.00166:  2*P -> P2\\n\\\n0.2:            P2 -> 2*P\\\n\";\n\nconst Dimerisation_init = \"\\\nP = 301\\n\\\nP2 = 0\\\n\";\n\nconst TK_2000_1_net = \"\\\n0.03125:           X1 + X2 -> 2 * X2\\n\\\n0.03125:           X2+ X3 -> 2 * X3\\n\\\n0.03125:           X3 + X4 -> 2 * X4\\n\\\n0.03125:           X4+ X1 -> 2 * X1\\n\\\n\\n\\\n0.00390625:  X1 ->\\n\\\n0.00390625:  X2 ->\\n\\\n0.00390625:  X3 ->\\n\\\n0.00390625:  X4 ->\\n\\\n\\n\\\n0.125: -> X1\\n\\\n0.125: -> X2\\n\\\n0.125: -> X3\\n\\\n0.125: -> X4\";\n\nconst TK_2000_1_init = \"\\\nX1 = 0\\n\\\nX2 = 0\\n\\\nX3 = 0\\n\\\nX4 = 0\";\n\nconst SK_2015_1_net = \"\\\n0.02: A + B -> 2*A\\n\\\n0.02: A + B -> 2*B\\n\\\n\\\n0.01: A -> B\\n\\\n0.01: B -> A\";\n\nconst SK_2015_1_init = \"\\\nA = 25\\n\\\nB = 25\";\n\nconst SK_2015_2_net = \"\\\n0.0005: A + B -> 2*A\\n\\\n0.0005: A + B -> 2*B\\n\\\n\\\n0.01: A -> B\\n\\\n0.01: B -> A\";\n\nconst SK_2015_2_init = \"\\\nA = 1000\\n\\\nB = 1000\";\n\nfunction setListeners(document) {\n    const input_network = document.getElementById(\"input-network\");\n    const input_initial = document.getElementById(\"input-initial\");\n\n    document.getElementById(\"item-lotka\").addEventListener(\"click\", () => {\n        input_network.value = Lotka_Volterra_net;\n        input_initial.value = Lotka_Volterra_init;\n    });\n\n    document.getElementById(\"item-menten\").addEventListener(\"click\", () => {\n        input_network.value = Michaelis_Menten_net;\n        input_initial.value = Michaelis_Menten_init;\n    });\n\n    document.getElementById(\"item-dimerisation\").addEventListener(\"click\", () => {\n        input_network.value = Dimerisation_net;\n        input_initial.value = Dimerisation_init;\n    });\n\n    document.getElementById(\"item-2000-1\").addEventListener(\"click\", () => {\n        input_network.value = TK_2000_1_net;\n        input_initial.value = TK_2000_1_init;\n    });\n\n    document.getElementById(\"item-2015-1\").addEventListener(\"click\", () => {\n        input_network.value = SK_2015_1_net;\n        input_initial.value = SK_2015_1_init;\n    });\n\n    document.getElementById(\"item-2015-2\").addEventListener(\"click\", () => {\n        input_network.value = SK_2015_2_net;\n        input_initial.value = SK_2015_2_init;\n    });\n}\n\n//# sourceURL=webpack:///./setListeners.js?");

/***/ })

}]);